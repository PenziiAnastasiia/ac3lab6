
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e40  08002e40  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e40  08002e40  00003e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e48  08002e48  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002e50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          000001b4  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000072a7  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000138a  00000000  00000000  0000b333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000648  00000000  00000000  0000c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c6  00000000  00000000  0000cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020043  00000000  00000000  0000d1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007faa  00000000  00000000  0002d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c27fc  00000000  00000000  000351bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f79b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001da8  00000000  00000000  000f79fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  000f97a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d78 	.word	0x08002d78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002d78 	.word	0x08002d78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <led_ON>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_ON(uint16_t led, const char *color)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	80fb      	strh	r3, [r7, #6]
	char message[20];
	sprintf(message, " - %s ON\r\n", color);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	490d      	ldr	r1, [pc, #52]	@ (80005b8 <led_ON+0x48>)
 8000584:	4618      	mov	r0, r3
 8000586:	f001 ff57 	bl	8002438 <siprintf>

	HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_SET);
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	480a      	ldr	r0, [pc, #40]	@ (80005bc <led_ON+0x4c>)
 8000592:	f000 fe3d 	bl	8001210 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 100);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe18 	bl	80001d0 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <led_ON+0x50>)
 80005ac:	f001 faf2 	bl	8001b94 <HAL_UART_Transmit>
}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08002d90 	.word	0x08002d90
 80005bc:	40020c00 	.word	0x40020c00
 80005c0:	20000078 	.word	0x20000078

080005c4 <led_OFF>:

void led_OFF(uint16_t led, const char *color)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	80fb      	strh	r3, [r7, #6]
	char message[20];
	sprintf(message, " - %s OFF\r\n", color);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	490d      	ldr	r1, [pc, #52]	@ (800060c <led_OFF+0x48>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 ff2d 	bl	8002438 <siprintf>

	HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_RESET);
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	480a      	ldr	r0, [pc, #40]	@ (8000610 <led_OFF+0x4c>)
 80005e6:	f000 fe13 	bl	8001210 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 100);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fdee 	bl	80001d0 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f107 010c 	add.w	r1, r7, #12
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <led_OFF+0x50>)
 8000600:	f001 fac8 	bl	8001b94 <HAL_UART_Transmit>
}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08002d9c 	.word	0x08002d9c
 8000610:	40020c00 	.word	0x40020c00
 8000614:	20000078 	.word	0x20000078

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fb03 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f92d 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f9b3 	bl	8000990 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800062a:	f000 f987 	bl	800093c <MX_USART3_UART_Init>
  while (1)
  {
	  uint8_t rcvBuf[1];
	  HAL_StatusTypeDef result;

	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 800062e:	1d39      	adds	r1, r7, #4
 8000630:	230a      	movs	r3, #10
 8000632:	2201      	movs	r2, #1
 8000634:	4889      	ldr	r0, [pc, #548]	@ (800085c <main+0x244>)
 8000636:	f001 fb38 	bl	8001caa <HAL_UART_Receive>
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]

	  if (result == HAL_OK)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1f4      	bne.n	800062e <main+0x16>
	  {
		  switch (rcvBuf[0])
 8000644:	793b      	ldrb	r3, [r7, #4]
 8000646:	3b31      	subs	r3, #49	@ 0x31
 8000648:	2b46      	cmp	r3, #70	@ 0x46
 800064a:	f200 80ff 	bhi.w	800084c <main+0x234>
 800064e:	a201      	add	r2, pc, #4	@ (adr r2, 8000654 <main+0x3c>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000771 	.word	0x08000771
 8000658:	0800077d 	.word	0x0800077d
 800065c:	08000789 	.word	0x08000789
 8000660:	08000795 	.word	0x08000795
 8000664:	0800084d 	.word	0x0800084d
 8000668:	0800084d 	.word	0x0800084d
 800066c:	0800084d 	.word	0x0800084d
 8000670:	0800084d 	.word	0x0800084d
 8000674:	0800084d 	.word	0x0800084d
 8000678:	0800084d 	.word	0x0800084d
 800067c:	0800084d 	.word	0x0800084d
 8000680:	0800084d 	.word	0x0800084d
 8000684:	0800084d 	.word	0x0800084d
 8000688:	0800084d 	.word	0x0800084d
 800068c:	0800084d 	.word	0x0800084d
 8000690:	0800084d 	.word	0x0800084d
 8000694:	0800084d 	.word	0x0800084d
 8000698:	0800084d 	.word	0x0800084d
 800069c:	0800084d 	.word	0x0800084d
 80006a0:	0800084d 	.word	0x0800084d
 80006a4:	0800084d 	.word	0x0800084d
 80006a8:	0800084d 	.word	0x0800084d
 80006ac:	0800084d 	.word	0x0800084d
 80006b0:	0800084d 	.word	0x0800084d
 80006b4:	0800084d 	.word	0x0800084d
 80006b8:	0800084d 	.word	0x0800084d
 80006bc:	0800084d 	.word	0x0800084d
 80006c0:	0800084d 	.word	0x0800084d
 80006c4:	0800084d 	.word	0x0800084d
 80006c8:	0800084d 	.word	0x0800084d
 80006cc:	0800084d 	.word	0x0800084d
 80006d0:	0800084d 	.word	0x0800084d
 80006d4:	0800084d 	.word	0x0800084d
 80006d8:	0800084d 	.word	0x0800084d
 80006dc:	0800084d 	.word	0x0800084d
 80006e0:	0800084d 	.word	0x0800084d
 80006e4:	0800084d 	.word	0x0800084d
 80006e8:	0800084d 	.word	0x0800084d
 80006ec:	0800084d 	.word	0x0800084d
 80006f0:	0800084d 	.word	0x0800084d
 80006f4:	0800084d 	.word	0x0800084d
 80006f8:	0800084d 	.word	0x0800084d
 80006fc:	0800084d 	.word	0x0800084d
 8000700:	0800084d 	.word	0x0800084d
 8000704:	0800084d 	.word	0x0800084d
 8000708:	0800084d 	.word	0x0800084d
 800070c:	0800084d 	.word	0x0800084d
 8000710:	0800084d 	.word	0x0800084d
 8000714:	0800084d 	.word	0x0800084d
 8000718:	0800084d 	.word	0x0800084d
 800071c:	0800084d 	.word	0x0800084d
 8000720:	0800084d 	.word	0x0800084d
 8000724:	080007b9 	.word	0x080007b9
 8000728:	0800080f 	.word	0x0800080f
 800072c:	0800084d 	.word	0x0800084d
 8000730:	0800084d 	.word	0x0800084d
 8000734:	0800084d 	.word	0x0800084d
 8000738:	0800084d 	.word	0x0800084d
 800073c:	0800084d 	.word	0x0800084d
 8000740:	0800084d 	.word	0x0800084d
 8000744:	0800084d 	.word	0x0800084d
 8000748:	080007d1 	.word	0x080007d1
 800074c:	0800084d 	.word	0x0800084d
 8000750:	0800084d 	.word	0x0800084d
 8000754:	080007a1 	.word	0x080007a1
 8000758:	080007c5 	.word	0x080007c5
 800075c:	0800084d 	.word	0x0800084d
 8000760:	0800084d 	.word	0x0800084d
 8000764:	0800084d 	.word	0x0800084d
 8000768:	0800084d 	.word	0x0800084d
 800076c:	080007ad 	.word	0x080007ad
		  {
		  	  case '1':
		  		  led_ON(GPIO_PIN_12, "Green");
 8000770:	493b      	ldr	r1, [pc, #236]	@ (8000860 <main+0x248>)
 8000772:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000776:	f7ff fefb 	bl	8000570 <led_ON>
		  		  break;
 800077a:	e06d      	b.n	8000858 <main+0x240>

		  	  case '2':
	  			  led_ON(GPIO_PIN_13, "Orange");
 800077c:	4939      	ldr	r1, [pc, #228]	@ (8000864 <main+0x24c>)
 800077e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000782:	f7ff fef5 	bl	8000570 <led_ON>
				  break;
 8000786:	e067      	b.n	8000858 <main+0x240>

		  	  case '3':
	  			  led_ON(GPIO_PIN_14, "Red");
 8000788:	4937      	ldr	r1, [pc, #220]	@ (8000868 <main+0x250>)
 800078a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800078e:	f7ff feef 	bl	8000570 <led_ON>
				  break;
 8000792:	e061      	b.n	8000858 <main+0x240>

		  	  case '4':
	  			  led_ON(GPIO_PIN_15, "Blue");
 8000794:	4935      	ldr	r1, [pc, #212]	@ (800086c <main+0x254>)
 8000796:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800079a:	f7ff fee9 	bl	8000570 <led_ON>
				  break;
 800079e:	e05b      	b.n	8000858 <main+0x240>

		  	  case 'q':
	  			  led_OFF(GPIO_PIN_12, "Green");
 80007a0:	492f      	ldr	r1, [pc, #188]	@ (8000860 <main+0x248>)
 80007a2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80007a6:	f7ff ff0d 	bl	80005c4 <led_OFF>
				  break;
 80007aa:	e055      	b.n	8000858 <main+0x240>

		  	  case 'w':
	  			  led_OFF(GPIO_PIN_13, "Orange");
 80007ac:	492d      	ldr	r1, [pc, #180]	@ (8000864 <main+0x24c>)
 80007ae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007b2:	f7ff ff07 	bl	80005c4 <led_OFF>
	  			  break;
 80007b6:	e04f      	b.n	8000858 <main+0x240>

		  	  case 'e':
		  		  led_OFF(GPIO_PIN_14, "Red");
 80007b8:	492b      	ldr	r1, [pc, #172]	@ (8000868 <main+0x250>)
 80007ba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80007be:	f7ff ff01 	bl	80005c4 <led_OFF>
		  		  break;
 80007c2:	e049      	b.n	8000858 <main+0x240>

		  	  case 'r':
		  		  led_OFF(GPIO_PIN_15, "Blue");
 80007c4:	4929      	ldr	r1, [pc, #164]	@ (800086c <main+0x254>)
 80007c6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80007ca:	f7ff fefb 	bl	80005c4 <led_OFF>
		  		  break;
 80007ce:	e043      	b.n	8000858 <main+0x240>

		  	  case 'n':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007d6:	4826      	ldr	r0, [pc, #152]	@ (8000870 <main+0x258>)
 80007d8:	f000 fd1a 	bl	8001210 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e2:	4823      	ldr	r0, [pc, #140]	@ (8000870 <main+0x258>)
 80007e4:	f000 fd14 	bl	8001210 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ee:	4820      	ldr	r0, [pc, #128]	@ (8000870 <main+0x258>)
 80007f0:	f000 fd0e 	bl	8001210 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007fa:	481d      	ldr	r0, [pc, #116]	@ (8000870 <main+0x258>)
 80007fc:	f000 fd08 	bl	8001210 <HAL_GPIO_WritePin>
	  			  HAL_UART_Transmit(&huart3, (uint8_t *)" - All is ON\r\n", 14, 100);
 8000800:	2364      	movs	r3, #100	@ 0x64
 8000802:	220e      	movs	r2, #14
 8000804:	491b      	ldr	r1, [pc, #108]	@ (8000874 <main+0x25c>)
 8000806:	4815      	ldr	r0, [pc, #84]	@ (800085c <main+0x244>)
 8000808:	f001 f9c4 	bl	8001b94 <HAL_UART_Transmit>
				  break;
 800080c:	e024      	b.n	8000858 <main+0x240>

		  	  case 'f':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000814:	4816      	ldr	r0, [pc, #88]	@ (8000870 <main+0x258>)
 8000816:	f000 fcfb 	bl	8001210 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000820:	4813      	ldr	r0, [pc, #76]	@ (8000870 <main+0x258>)
 8000822:	f000 fcf5 	bl	8001210 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800082c:	4810      	ldr	r0, [pc, #64]	@ (8000870 <main+0x258>)
 800082e:	f000 fcef 	bl	8001210 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <main+0x258>)
 800083a:	f000 fce9 	bl	8001210 <HAL_GPIO_WritePin>
	 			  HAL_UART_Transmit(&huart3, (uint8_t *)" - All is OFF\r\n", 15, 100);
 800083e:	2364      	movs	r3, #100	@ 0x64
 8000840:	220f      	movs	r2, #15
 8000842:	490d      	ldr	r1, [pc, #52]	@ (8000878 <main+0x260>)
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <main+0x244>)
 8000846:	f001 f9a5 	bl	8001b94 <HAL_UART_Transmit>
 				  break;
 800084a:	e005      	b.n	8000858 <main+0x240>

		  	  default:
	  			  HAL_UART_Transmit(&huart3, (uint8_t *)" - UnexpCmd\r\n", 13, 100);
 800084c:	2364      	movs	r3, #100	@ 0x64
 800084e:	220d      	movs	r2, #13
 8000850:	490a      	ldr	r1, [pc, #40]	@ (800087c <main+0x264>)
 8000852:	4802      	ldr	r0, [pc, #8]	@ (800085c <main+0x244>)
 8000854:	f001 f99e 	bl	8001b94 <HAL_UART_Transmit>
  {
 8000858:	e6e9      	b.n	800062e <main+0x16>
 800085a:	bf00      	nop
 800085c:	20000078 	.word	0x20000078
 8000860:	08002da8 	.word	0x08002da8
 8000864:	08002db0 	.word	0x08002db0
 8000868:	08002db8 	.word	0x08002db8
 800086c:	08002dbc 	.word	0x08002dbc
 8000870:	40020c00 	.word	0x40020c00
 8000874:	08002dc4 	.word	0x08002dc4
 8000878:	08002dd4 	.word	0x08002dd4
 800087c:	08002de4 	.word	0x08002de4

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	@ 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fdf2 	bl	8002478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <SystemClock_Config+0xb4>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a21      	ldr	r2, [pc, #132]	@ (8000934 <SystemClock_Config+0xb4>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <SystemClock_Config+0xb4>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <SystemClock_Config+0xb8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <SystemClock_Config+0xb8>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <SystemClock_Config+0xb8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2310      	movs	r3, #16
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fca7 	bl	8001244 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008fc:	f000 f87c 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f000 ff0a 	bl	8001734 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000926:	f000 f867 	bl	80009f8 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	@ 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_USART3_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 8000948:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_USART3_UART_Init+0x4c>)
 8000974:	f001 f8be 	bl	8001af4 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f83b 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000078 	.word	0x20000078
 800098c:	40004800 	.word	0x40004800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_GPIO_Init+0x60>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ac:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <MX_GPIO_Init+0x60>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_GPIO_Init+0x60>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <MX_GPIO_Init+0x64>)
 80009c8:	f000 fc22 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009cc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_GPIO_Init+0x64>)
 80009e4:	f000 fa78 	bl	8000ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <HAL_UART_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <HAL_UART_MspInit+0x8c>)
 8000acc:	f000 fa04 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004800 	.word	0x40004800
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f8c7 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f001 fc88 	bl	8002488 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20020000 	.word	0x20020000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	200000c0 	.word	0x200000c0
 8000bac:	20000210 	.word	0x20000210

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bd8:	f7ff ffea 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bde:	490d      	ldr	r1, [pc, #52]	@ (8000c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c02:	f001 fc47 	bl	8002494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fd07 	bl	8000618 <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c18:	08002e50 	.word	0x08002e50
  ldr r2, =_sbss
 8000c1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c20:	20000210 	.word	0x20000210

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	@ (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f90d 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fed2 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f917 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f8ed 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200000c4 	.word	0x200000c4

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200000c4 	.word	0x200000c4

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff47 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff5c 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffb0 	bl	8000e2c <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e16b      	b.n	80011cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 815a 	bne.w	80011c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80b4 	beq.w	80011c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b60      	ldr	r3, [pc, #384]	@ (80011e4 <HAL_GPIO_Init+0x30c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a5f      	ldr	r2, [pc, #380]	@ (80011e4 <HAL_GPIO_Init+0x30c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b5d      	ldr	r3, [pc, #372]	@ (80011e4 <HAL_GPIO_Init+0x30c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a5b      	ldr	r2, [pc, #364]	@ (80011e8 <HAL_GPIO_Init+0x310>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a52      	ldr	r2, [pc, #328]	@ (80011ec <HAL_GPIO_Init+0x314>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d02b      	beq.n	80010fe <HAL_GPIO_Init+0x226>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a51      	ldr	r2, [pc, #324]	@ (80011f0 <HAL_GPIO_Init+0x318>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x222>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a50      	ldr	r2, [pc, #320]	@ (80011f4 <HAL_GPIO_Init+0x31c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x21e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4f      	ldr	r2, [pc, #316]	@ (80011f8 <HAL_GPIO_Init+0x320>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x21a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4e      	ldr	r2, [pc, #312]	@ (80011fc <HAL_GPIO_Init+0x324>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x216>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001200 <HAL_GPIO_Init+0x328>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x212>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001204 <HAL_GPIO_Init+0x32c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x20e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001208 <HAL_GPIO_Init+0x330>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x20a>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00e      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010e2:	2308      	movs	r3, #8
 80010e4:	e00c      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010e6:	2306      	movs	r3, #6
 80010e8:	e00a      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	@ (80011e8 <HAL_GPIO_Init+0x310>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <HAL_GPIO_Init+0x334>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a32      	ldr	r2, [pc, #200]	@ (800120c <HAL_GPIO_Init+0x334>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <HAL_GPIO_Init+0x334>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <HAL_GPIO_Init+0x334>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <HAL_GPIO_Init+0x334>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001196:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <HAL_GPIO_Init+0x334>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <HAL_GPIO_Init+0x334>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c0:	4a12      	ldr	r2, [pc, #72]	@ (800120c <HAL_GPIO_Init+0x334>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f ae90 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	@ 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40021400 	.word	0x40021400
 8001204:	40021800 	.word	0x40021800
 8001208:	40021c00 	.word	0x40021c00
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800122c:	e003      	b.n	8001236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e267      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b85      	ldr	r3, [pc, #532]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b82      	ldr	r3, [pc, #520]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b7e      	ldr	r3, [pc, #504]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e242      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6f      	ldr	r2, [pc, #444]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b69      	ldr	r3, [pc, #420]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a68      	ldr	r2, [pc, #416]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b66      	ldr	r3, [pc, #408]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a65      	ldr	r2, [pc, #404]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcfa 	bl	8000cf4 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcf6 	bl	8000cf4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	@ 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e207      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b5b      	ldr	r3, [pc, #364]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fce6 	bl	8000cf4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fce2 	bl	8000cf4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	@ 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f3      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b4a      	ldr	r3, [pc, #296]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b44      	ldr	r3, [pc, #272]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c7      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4937      	ldr	r1, [pc, #220]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <HAL_RCC_OscConfig+0x244>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc9b 	bl	8000cf4 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc97 	bl	8000cf4 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a8      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4925      	ldr	r1, [pc, #148]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <HAL_RCC_OscConfig+0x244>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc7a 	bl	8000cf4 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc76 	bl	8000cf4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e187      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d036      	beq.n	800149c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_RCC_OscConfig+0x248>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fc5a 	bl	8000cf4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc56 	bl	8000cf4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e167      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_OscConfig+0x240>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_OscConfig+0x248>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc43 	bl	8000cf4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00e      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc3f 	bl	8000cf4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d907      	bls.n	8001490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e150      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b88      	ldr	r3, [pc, #544]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ea      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8097 	beq.w	80015d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b81      	ldr	r3, [pc, #516]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a7c      	ldr	r2, [pc, #496]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b7a      	ldr	r3, [pc, #488]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b77      	ldr	r3, [pc, #476]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b74      	ldr	r3, [pc, #464]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a73      	ldr	r2, [pc, #460]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbff 	bl	8000cf4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fbfb 	bl	8000cf4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e10c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b6a      	ldr	r3, [pc, #424]	@ (80016b8 <HAL_RCC_OscConfig+0x474>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x2ea>
 8001520:	4b64      	ldr	r3, [pc, #400]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001524:	4a63      	ldr	r2, [pc, #396]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	@ 0x70
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x30c>
 8001536:	4b5f      	ldr	r3, [pc, #380]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153a:	4a5e      	ldr	r2, [pc, #376]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	@ 0x70
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001546:	4a5b      	ldr	r2, [pc, #364]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	@ 0x70
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	4a57      	ldr	r2, [pc, #348]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	@ 0x70
 800155c:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001560:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d015      	beq.n	800159c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fbc0 	bl	8000cf4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fbbc 	bl	8000cf4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0cb      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	4b49      	ldr	r3, [pc, #292]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ee      	beq.n	8001578 <HAL_RCC_OscConfig+0x334>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fbaa 	bl	8000cf4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fba6 	bl	8000cf4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b5      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ee      	bne.n	80015a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a38      	ldr	r2, [pc, #224]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a1 	beq.w	8001724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d05c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d141      	bne.n	800167a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb7a 	bl	8000cf4 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fb76 	bl	8000cf4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e087      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	491b      	ldr	r1, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb4f 	bl	8000cf4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb4b 	bl	8000cf4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e05c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x416>
 8001678:	e054      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb38 	bl	8000cf4 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb34 	bl	8000cf4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e045      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
 80016a6:	e03d      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e038      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000
 80016bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d121      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff fa66 	bl	8000cf4 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff fa62 	bl	8000cf4 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9c6 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08002df4 	.word	0x08002df4
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b090      	sub	sp, #64	@ 0x40
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	@ 0x34
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b59      	ldr	r3, [pc, #356]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80a1 	bhi.w	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e09b      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001936:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001938:	e09b      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800193e:	e098      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b4f      	ldr	r3, [pc, #316]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001948:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	627a      	str	r2, [r7, #36]	@ 0x24
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001968:	2100      	movs	r1, #0
 800196a:	4b47      	ldr	r3, [pc, #284]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800196c:	fb03 f201 	mul.w	r2, r3, r1
 8001970:	2300      	movs	r3, #0
 8001972:	fb00 f303 	mul.w	r3, r0, r3
 8001976:	4413      	add	r3, r2
 8001978:	4a43      	ldr	r2, [pc, #268]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800197a:	fba0 1202 	umull	r1, r2, r0, r2
 800197e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001980:	460a      	mov	r2, r1
 8001982:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001986:	4413      	add	r3, r2
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198c:	2200      	movs	r2, #0
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	61fa      	str	r2, [r7, #28]
 8001992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800199a:	f7fe fc71 	bl	8000280 <__aeabi_uldivmod>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4613      	mov	r3, r2
 80019a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019a6:	e053      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a8:	4b35      	ldr	r3, [pc, #212]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	2200      	movs	r2, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	617a      	str	r2, [r7, #20]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ba:	f04f 0b00 	mov.w	fp, #0
 80019be:	4652      	mov	r2, sl
 80019c0:	465b      	mov	r3, fp
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ebb2 080a 	subs.w	r8, r2, sl
 80019da:	eb63 090b 	sbc.w	r9, r3, fp
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019f2:	ebb2 0408 	subs.w	r4, r2, r8
 80019f6:	eb63 0509 	sbc.w	r5, r3, r9
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	00eb      	lsls	r3, r5, #3
 8001a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a08:	00e2      	lsls	r2, r4, #3
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	eb14 030a 	adds.w	r3, r4, sl
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	eb45 030b 	adc.w	r3, r5, fp
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a26:	4629      	mov	r1, r5
 8001a28:	028b      	lsls	r3, r1, #10
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a30:	4621      	mov	r1, r4
 8001a32:	028a      	lsls	r2, r1, #10
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a44:	f7fe fc1c 	bl	8000280 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3740      	adds	r7, #64	@ 0x40
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	017d7840 	.word	0x017d7840

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	@ (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08002e04 	.word	0x08002e04

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ad0:	f7ff ffdc 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	0b5b      	lsrs	r3, r3, #13
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	@ (8001af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08002e04 	.word	0x08002e04

08001af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e042      	b.n	8001b8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe ff9a 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	@ 0x24
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fa09 	bl	8001f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d175      	bne.n	8001ca0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_UART_Transmit+0x2c>
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e06e      	b.n	8001ca2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2221      	movs	r2, #33	@ 0x21
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bd2:	f7ff f88f 	bl	8000cf4 <HAL_GetTick>
 8001bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bec:	d108      	bne.n	8001c00 <HAL_UART_Transmit+0x6c>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d104      	bne.n	8001c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	e003      	b.n	8001c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c08:	e02e      	b.n	8001c68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2200      	movs	r2, #0
 8001c12:	2180      	movs	r1, #128	@ 0x80
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f8df 	bl	8001dd8 <UART_WaitOnFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e03a      	b.n	8001ca2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10b      	bne.n	8001c4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	3302      	adds	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e007      	b.n	8001c5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1cb      	bne.n	8001c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2140      	movs	r1, #64	@ 0x40
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f8ab 	bl	8001dd8 <UART_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e006      	b.n	8001ca2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b08a      	sub	sp, #40	@ 0x28
 8001cae:	af02      	add	r7, sp, #8
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	f040 8081 	bne.w	8001dce <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <HAL_UART_Receive+0x2e>
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e079      	b.n	8001dd0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2222      	movs	r2, #34	@ 0x22
 8001ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f800 	bl	8000cf4 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	88fa      	ldrh	r2, [r7, #6]
 8001d00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d0a:	d108      	bne.n	8001d1e <HAL_UART_Receive+0x74>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d104      	bne.n	8001d1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e003      	b.n	8001d26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d26:	e047      	b.n	8001db8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2120      	movs	r1, #32
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f850 	bl	8001dd8 <UART_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e042      	b.n	8001dd0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10c      	bne.n	8001d6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	3302      	adds	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e01f      	b.n	8001daa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d72:	d007      	beq.n	8001d84 <HAL_UART_Receive+0xda>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <HAL_UART_Receive+0xe8>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e008      	b.n	8001da4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	3301      	adds	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1b2      	bne.n	8001d28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001de8:	e03b      	b.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d037      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7fe ff7f 	bl	8000cf4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e03a      	b.n	8001e82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d023      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b80      	cmp	r3, #128	@ 0x80
 8001e1e:	d020      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b40      	cmp	r3, #64	@ 0x40
 8001e24:	d01d      	beq.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d116      	bne.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f81d 	bl	8001e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2208      	movs	r2, #8
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d0b4      	beq.n	8001dea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b095      	sub	sp, #84	@ 0x54
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	330c      	adds	r3, #12
 8001e98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	e853 3f00 	ldrex	r3, [r3]
 8001ea0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	330c      	adds	r3, #12
 8001eb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8001eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001eb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001eba:	e841 2300 	strex	r3, r2, [r1]
 8001ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e5      	bne.n	8001e92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3314      	adds	r3, #20
 8001ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3314      	adds	r3, #20
 8001ee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eee:	e841 2300 	strex	r3, r2, [r1]
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e5      	bne.n	8001ec6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d119      	bne.n	8001f36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	330c      	adds	r3, #12
 8001f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	e853 3f00 	ldrex	r3, [r3]
 8001f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f023 0310 	bic.w	r3, r3, #16
 8001f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	330c      	adds	r3, #12
 8001f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f22:	61ba      	str	r2, [r7, #24]
 8001f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f26:	6979      	ldr	r1, [r7, #20]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	e841 2300 	strex	r3, r2, [r1]
 8001f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1e5      	bne.n	8001f02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f44:	bf00      	nop
 8001f46:	3754      	adds	r7, #84	@ 0x54
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f54:	b0c0      	sub	sp, #256	@ 0x100
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	ea40 0301 	orr.w	r3, r0, r1
 8001f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fa8:	f021 010c 	bic.w	r1, r1, #12
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fca:	6999      	ldr	r1, [r3, #24]
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	ea40 0301 	orr.w	r3, r0, r1
 8001fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b8f      	ldr	r3, [pc, #572]	@ (800221c <UART_SetConfig+0x2cc>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d005      	beq.n	8001ff0 <UART_SetConfig+0xa0>
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b8d      	ldr	r3, [pc, #564]	@ (8002220 <UART_SetConfig+0x2d0>)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d104      	bne.n	8001ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff0:	f7ff fd6c 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 8001ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ff8:	e003      	b.n	8002002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ffa:	f7ff fd53 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8001ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800200c:	f040 810c 	bne.w	8002228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002014:	2200      	movs	r2, #0
 8002016:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800201a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800201e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002022:	4622      	mov	r2, r4
 8002024:	462b      	mov	r3, r5
 8002026:	1891      	adds	r1, r2, r2
 8002028:	65b9      	str	r1, [r7, #88]	@ 0x58
 800202a:	415b      	adcs	r3, r3
 800202c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800202e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002032:	4621      	mov	r1, r4
 8002034:	eb12 0801 	adds.w	r8, r2, r1
 8002038:	4629      	mov	r1, r5
 800203a:	eb43 0901 	adc.w	r9, r3, r1
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800204a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002052:	4690      	mov	r8, r2
 8002054:	4699      	mov	r9, r3
 8002056:	4623      	mov	r3, r4
 8002058:	eb18 0303 	adds.w	r3, r8, r3
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002060:	462b      	mov	r3, r5
 8002062:	eb49 0303 	adc.w	r3, r9, r3
 8002066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800206a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002076:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800207a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800207e:	460b      	mov	r3, r1
 8002080:	18db      	adds	r3, r3, r3
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50
 8002084:	4613      	mov	r3, r2
 8002086:	eb42 0303 	adc.w	r3, r2, r3
 800208a:	657b      	str	r3, [r7, #84]	@ 0x54
 800208c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002094:	f7fe f8f4 	bl	8000280 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4b61      	ldr	r3, [pc, #388]	@ (8002224 <UART_SetConfig+0x2d4>)
 800209e:	fba3 2302 	umull	r2, r3, r3, r2
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	011c      	lsls	r4, r3, #4
 80020a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	1891      	adds	r1, r2, r2
 80020be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020c0:	415b      	adcs	r3, r3
 80020c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020c8:	4641      	mov	r1, r8
 80020ca:	eb12 0a01 	adds.w	sl, r2, r1
 80020ce:	4649      	mov	r1, r9
 80020d0:	eb43 0b01 	adc.w	fp, r3, r1
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e8:	4692      	mov	sl, r2
 80020ea:	469b      	mov	fp, r3
 80020ec:	4643      	mov	r3, r8
 80020ee:	eb1a 0303 	adds.w	r3, sl, r3
 80020f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020f6:	464b      	mov	r3, r9
 80020f8:	eb4b 0303 	adc.w	r3, fp, r3
 80020fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800210c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002114:	460b      	mov	r3, r1
 8002116:	18db      	adds	r3, r3, r3
 8002118:	643b      	str	r3, [r7, #64]	@ 0x40
 800211a:	4613      	mov	r3, r2
 800211c:	eb42 0303 	adc.w	r3, r2, r3
 8002120:	647b      	str	r3, [r7, #68]	@ 0x44
 8002122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800212a:	f7fe f8a9 	bl	8000280 <__aeabi_uldivmod>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4611      	mov	r1, r2
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <UART_SetConfig+0x2d4>)
 8002136:	fba3 2301 	umull	r2, r3, r3, r1
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2264      	movs	r2, #100	@ 0x64
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800214a:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <UART_SetConfig+0x2d4>)
 800214c:	fba3 2302 	umull	r2, r3, r3, r2
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002158:	441c      	add	r4, r3
 800215a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002164:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800216c:	4642      	mov	r2, r8
 800216e:	464b      	mov	r3, r9
 8002170:	1891      	adds	r1, r2, r2
 8002172:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002174:	415b      	adcs	r3, r3
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800217c:	4641      	mov	r1, r8
 800217e:	1851      	adds	r1, r2, r1
 8002180:	6339      	str	r1, [r7, #48]	@ 0x30
 8002182:	4649      	mov	r1, r9
 8002184:	414b      	adcs	r3, r1
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002194:	4659      	mov	r1, fp
 8002196:	00cb      	lsls	r3, r1, #3
 8002198:	4651      	mov	r1, sl
 800219a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800219e:	4651      	mov	r1, sl
 80021a0:	00ca      	lsls	r2, r1, #3
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	4642      	mov	r2, r8
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021b0:	464b      	mov	r3, r9
 80021b2:	460a      	mov	r2, r1
 80021b4:	eb42 0303 	adc.w	r3, r2, r3
 80021b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021d0:	460b      	mov	r3, r1
 80021d2:	18db      	adds	r3, r3, r3
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d6:	4613      	mov	r3, r2
 80021d8:	eb42 0303 	adc.w	r3, r2, r3
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80021e6:	f7fe f84b 	bl	8000280 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <UART_SetConfig+0x2d4>)
 80021f0:	fba3 1302 	umull	r1, r3, r3, r2
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	2164      	movs	r1, #100	@ 0x64
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	3332      	adds	r3, #50	@ 0x32
 8002202:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <UART_SetConfig+0x2d4>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	f003 0207 	and.w	r2, r3, #7
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4422      	add	r2, r4
 8002216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002218:	e106      	b.n	8002428 <UART_SetConfig+0x4d8>
 800221a:	bf00      	nop
 800221c:	40011000 	.word	0x40011000
 8002220:	40011400 	.word	0x40011400
 8002224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800222c:	2200      	movs	r2, #0
 800222e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002232:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800223a:	4642      	mov	r2, r8
 800223c:	464b      	mov	r3, r9
 800223e:	1891      	adds	r1, r2, r2
 8002240:	6239      	str	r1, [r7, #32]
 8002242:	415b      	adcs	r3, r3
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
 8002246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800224a:	4641      	mov	r1, r8
 800224c:	1854      	adds	r4, r2, r1
 800224e:	4649      	mov	r1, r9
 8002250:	eb43 0501 	adc.w	r5, r3, r1
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	00eb      	lsls	r3, r5, #3
 800225e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002262:	00e2      	lsls	r2, r4, #3
 8002264:	4614      	mov	r4, r2
 8002266:	461d      	mov	r5, r3
 8002268:	4643      	mov	r3, r8
 800226a:	18e3      	adds	r3, r4, r3
 800226c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002270:	464b      	mov	r3, r9
 8002272:	eb45 0303 	adc.w	r3, r5, r3
 8002276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800227a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002296:	4629      	mov	r1, r5
 8002298:	008b      	lsls	r3, r1, #2
 800229a:	4621      	mov	r1, r4
 800229c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022a0:	4621      	mov	r1, r4
 80022a2:	008a      	lsls	r2, r1, #2
 80022a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022a8:	f7fd ffea 	bl	8000280 <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4b60      	ldr	r3, [pc, #384]	@ (8002434 <UART_SetConfig+0x4e4>)
 80022b2:	fba3 2302 	umull	r2, r3, r3, r2
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	011c      	lsls	r4, r3, #4
 80022ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	1891      	adds	r1, r2, r2
 80022d2:	61b9      	str	r1, [r7, #24]
 80022d4:	415b      	adcs	r3, r3
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022dc:	4641      	mov	r1, r8
 80022de:	1851      	adds	r1, r2, r1
 80022e0:	6139      	str	r1, [r7, #16]
 80022e2:	4649      	mov	r1, r9
 80022e4:	414b      	adcs	r3, r1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022f4:	4659      	mov	r1, fp
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fe:	4651      	mov	r1, sl
 8002300:	00ca      	lsls	r2, r1, #3
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4603      	mov	r3, r0
 8002308:	4642      	mov	r2, r8
 800230a:	189b      	adds	r3, r3, r2
 800230c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002310:	464b      	mov	r3, r9
 8002312:	460a      	mov	r2, r1
 8002314:	eb42 0303 	adc.w	r3, r2, r3
 8002318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002326:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002334:	4649      	mov	r1, r9
 8002336:	008b      	lsls	r3, r1, #2
 8002338:	4641      	mov	r1, r8
 800233a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800233e:	4641      	mov	r1, r8
 8002340:	008a      	lsls	r2, r1, #2
 8002342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002346:	f7fd ff9b 	bl	8000280 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4611      	mov	r1, r2
 8002350:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002352:	fba3 2301 	umull	r2, r3, r3, r1
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2264      	movs	r2, #100	@ 0x64
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	1acb      	subs	r3, r1, r3
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	3332      	adds	r3, #50	@ 0x32
 8002364:	4a33      	ldr	r2, [pc, #204]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	441c      	add	r4, r3
 8002372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002376:	2200      	movs	r2, #0
 8002378:	673b      	str	r3, [r7, #112]	@ 0x70
 800237a:	677a      	str	r2, [r7, #116]	@ 0x74
 800237c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002380:	4642      	mov	r2, r8
 8002382:	464b      	mov	r3, r9
 8002384:	1891      	adds	r1, r2, r2
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	415b      	adcs	r3, r3
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002390:	4641      	mov	r1, r8
 8002392:	1851      	adds	r1, r2, r1
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	4649      	mov	r1, r9
 8002398:	414b      	adcs	r3, r1
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023a8:	4659      	mov	r1, fp
 80023aa:	00cb      	lsls	r3, r1, #3
 80023ac:	4651      	mov	r1, sl
 80023ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b2:	4651      	mov	r1, sl
 80023b4:	00ca      	lsls	r2, r1, #3
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	4642      	mov	r2, r8
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023c2:	464b      	mov	r3, r9
 80023c4:	460a      	mov	r2, r1
 80023c6:	eb42 0303 	adc.w	r3, r2, r3
 80023ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80023d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80023e4:	4649      	mov	r1, r9
 80023e6:	008b      	lsls	r3, r1, #2
 80023e8:	4641      	mov	r1, r8
 80023ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ee:	4641      	mov	r1, r8
 80023f0:	008a      	lsls	r2, r1, #2
 80023f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023f6:	f7fd ff43 	bl	8000280 <__aeabi_uldivmod>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002400:	fba3 1302 	umull	r1, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	2164      	movs	r1, #100	@ 0x64
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	3332      	adds	r3, #50	@ 0x32
 8002412:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <UART_SetConfig+0x4e4>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	f003 020f 	and.w	r2, r3, #15
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4422      	add	r2, r4
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800242e:	46bd      	mov	sp, r7
 8002430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002434:	51eb851f 	.word	0x51eb851f

08002438 <siprintf>:
 8002438:	b40e      	push	{r1, r2, r3}
 800243a:	b500      	push	{lr}
 800243c:	b09c      	sub	sp, #112	@ 0x70
 800243e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002440:	9002      	str	r0, [sp, #8]
 8002442:	9006      	str	r0, [sp, #24]
 8002444:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002448:	4809      	ldr	r0, [pc, #36]	@ (8002470 <siprintf+0x38>)
 800244a:	9107      	str	r1, [sp, #28]
 800244c:	9104      	str	r1, [sp, #16]
 800244e:	4909      	ldr	r1, [pc, #36]	@ (8002474 <siprintf+0x3c>)
 8002450:	f853 2b04 	ldr.w	r2, [r3], #4
 8002454:	9105      	str	r1, [sp, #20]
 8002456:	6800      	ldr	r0, [r0, #0]
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	a902      	add	r1, sp, #8
 800245c:	f000 f994 	bl	8002788 <_svfiprintf_r>
 8002460:	9b02      	ldr	r3, [sp, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	b01c      	add	sp, #112	@ 0x70
 8002468:	f85d eb04 	ldr.w	lr, [sp], #4
 800246c:	b003      	add	sp, #12
 800246e:	4770      	bx	lr
 8002470:	2000000c 	.word	0x2000000c
 8002474:	ffff0208 	.word	0xffff0208

08002478 <memset>:
 8002478:	4402      	add	r2, r0
 800247a:	4603      	mov	r3, r0
 800247c:	4293      	cmp	r3, r2
 800247e:	d100      	bne.n	8002482 <memset+0xa>
 8002480:	4770      	bx	lr
 8002482:	f803 1b01 	strb.w	r1, [r3], #1
 8002486:	e7f9      	b.n	800247c <memset+0x4>

08002488 <__errno>:
 8002488:	4b01      	ldr	r3, [pc, #4]	@ (8002490 <__errno+0x8>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000000c 	.word	0x2000000c

08002494 <__libc_init_array>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	4d0d      	ldr	r5, [pc, #52]	@ (80024cc <__libc_init_array+0x38>)
 8002498:	4c0d      	ldr	r4, [pc, #52]	@ (80024d0 <__libc_init_array+0x3c>)
 800249a:	1b64      	subs	r4, r4, r5
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	2600      	movs	r6, #0
 80024a0:	42a6      	cmp	r6, r4
 80024a2:	d109      	bne.n	80024b8 <__libc_init_array+0x24>
 80024a4:	4d0b      	ldr	r5, [pc, #44]	@ (80024d4 <__libc_init_array+0x40>)
 80024a6:	4c0c      	ldr	r4, [pc, #48]	@ (80024d8 <__libc_init_array+0x44>)
 80024a8:	f000 fc66 	bl	8002d78 <_init>
 80024ac:	1b64      	subs	r4, r4, r5
 80024ae:	10a4      	asrs	r4, r4, #2
 80024b0:	2600      	movs	r6, #0
 80024b2:	42a6      	cmp	r6, r4
 80024b4:	d105      	bne.n	80024c2 <__libc_init_array+0x2e>
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
 80024b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024bc:	4798      	blx	r3
 80024be:	3601      	adds	r6, #1
 80024c0:	e7ee      	b.n	80024a0 <__libc_init_array+0xc>
 80024c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024c6:	4798      	blx	r3
 80024c8:	3601      	adds	r6, #1
 80024ca:	e7f2      	b.n	80024b2 <__libc_init_array+0x1e>
 80024cc:	08002e48 	.word	0x08002e48
 80024d0:	08002e48 	.word	0x08002e48
 80024d4:	08002e48 	.word	0x08002e48
 80024d8:	08002e4c 	.word	0x08002e4c

080024dc <__retarget_lock_acquire_recursive>:
 80024dc:	4770      	bx	lr

080024de <__retarget_lock_release_recursive>:
 80024de:	4770      	bx	lr

080024e0 <_free_r>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4605      	mov	r5, r0
 80024e4:	2900      	cmp	r1, #0
 80024e6:	d041      	beq.n	800256c <_free_r+0x8c>
 80024e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024ec:	1f0c      	subs	r4, r1, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bfb8      	it	lt
 80024f2:	18e4      	addlt	r4, r4, r3
 80024f4:	f000 f8e0 	bl	80026b8 <__malloc_lock>
 80024f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002570 <_free_r+0x90>)
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	b933      	cbnz	r3, 800250c <_free_r+0x2c>
 80024fe:	6063      	str	r3, [r4, #4]
 8002500:	6014      	str	r4, [r2, #0]
 8002502:	4628      	mov	r0, r5
 8002504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002508:	f000 b8dc 	b.w	80026c4 <__malloc_unlock>
 800250c:	42a3      	cmp	r3, r4
 800250e:	d908      	bls.n	8002522 <_free_r+0x42>
 8002510:	6820      	ldr	r0, [r4, #0]
 8002512:	1821      	adds	r1, r4, r0
 8002514:	428b      	cmp	r3, r1
 8002516:	bf01      	itttt	eq
 8002518:	6819      	ldreq	r1, [r3, #0]
 800251a:	685b      	ldreq	r3, [r3, #4]
 800251c:	1809      	addeq	r1, r1, r0
 800251e:	6021      	streq	r1, [r4, #0]
 8002520:	e7ed      	b.n	80024fe <_free_r+0x1e>
 8002522:	461a      	mov	r2, r3
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	b10b      	cbz	r3, 800252c <_free_r+0x4c>
 8002528:	42a3      	cmp	r3, r4
 800252a:	d9fa      	bls.n	8002522 <_free_r+0x42>
 800252c:	6811      	ldr	r1, [r2, #0]
 800252e:	1850      	adds	r0, r2, r1
 8002530:	42a0      	cmp	r0, r4
 8002532:	d10b      	bne.n	800254c <_free_r+0x6c>
 8002534:	6820      	ldr	r0, [r4, #0]
 8002536:	4401      	add	r1, r0
 8002538:	1850      	adds	r0, r2, r1
 800253a:	4283      	cmp	r3, r0
 800253c:	6011      	str	r1, [r2, #0]
 800253e:	d1e0      	bne.n	8002502 <_free_r+0x22>
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	6053      	str	r3, [r2, #4]
 8002546:	4408      	add	r0, r1
 8002548:	6010      	str	r0, [r2, #0]
 800254a:	e7da      	b.n	8002502 <_free_r+0x22>
 800254c:	d902      	bls.n	8002554 <_free_r+0x74>
 800254e:	230c      	movs	r3, #12
 8002550:	602b      	str	r3, [r5, #0]
 8002552:	e7d6      	b.n	8002502 <_free_r+0x22>
 8002554:	6820      	ldr	r0, [r4, #0]
 8002556:	1821      	adds	r1, r4, r0
 8002558:	428b      	cmp	r3, r1
 800255a:	bf04      	itt	eq
 800255c:	6819      	ldreq	r1, [r3, #0]
 800255e:	685b      	ldreq	r3, [r3, #4]
 8002560:	6063      	str	r3, [r4, #4]
 8002562:	bf04      	itt	eq
 8002564:	1809      	addeq	r1, r1, r0
 8002566:	6021      	streq	r1, [r4, #0]
 8002568:	6054      	str	r4, [r2, #4]
 800256a:	e7ca      	b.n	8002502 <_free_r+0x22>
 800256c:	bd38      	pop	{r3, r4, r5, pc}
 800256e:	bf00      	nop
 8002570:	2000020c 	.word	0x2000020c

08002574 <sbrk_aligned>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	4e0f      	ldr	r6, [pc, #60]	@ (80025b4 <sbrk_aligned+0x40>)
 8002578:	460c      	mov	r4, r1
 800257a:	6831      	ldr	r1, [r6, #0]
 800257c:	4605      	mov	r5, r0
 800257e:	b911      	cbnz	r1, 8002586 <sbrk_aligned+0x12>
 8002580:	f000 fba6 	bl	8002cd0 <_sbrk_r>
 8002584:	6030      	str	r0, [r6, #0]
 8002586:	4621      	mov	r1, r4
 8002588:	4628      	mov	r0, r5
 800258a:	f000 fba1 	bl	8002cd0 <_sbrk_r>
 800258e:	1c43      	adds	r3, r0, #1
 8002590:	d103      	bne.n	800259a <sbrk_aligned+0x26>
 8002592:	f04f 34ff 	mov.w	r4, #4294967295
 8002596:	4620      	mov	r0, r4
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	1cc4      	adds	r4, r0, #3
 800259c:	f024 0403 	bic.w	r4, r4, #3
 80025a0:	42a0      	cmp	r0, r4
 80025a2:	d0f8      	beq.n	8002596 <sbrk_aligned+0x22>
 80025a4:	1a21      	subs	r1, r4, r0
 80025a6:	4628      	mov	r0, r5
 80025a8:	f000 fb92 	bl	8002cd0 <_sbrk_r>
 80025ac:	3001      	adds	r0, #1
 80025ae:	d1f2      	bne.n	8002596 <sbrk_aligned+0x22>
 80025b0:	e7ef      	b.n	8002592 <sbrk_aligned+0x1e>
 80025b2:	bf00      	nop
 80025b4:	20000208 	.word	0x20000208

080025b8 <_malloc_r>:
 80025b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025bc:	1ccd      	adds	r5, r1, #3
 80025be:	f025 0503 	bic.w	r5, r5, #3
 80025c2:	3508      	adds	r5, #8
 80025c4:	2d0c      	cmp	r5, #12
 80025c6:	bf38      	it	cc
 80025c8:	250c      	movcc	r5, #12
 80025ca:	2d00      	cmp	r5, #0
 80025cc:	4606      	mov	r6, r0
 80025ce:	db01      	blt.n	80025d4 <_malloc_r+0x1c>
 80025d0:	42a9      	cmp	r1, r5
 80025d2:	d904      	bls.n	80025de <_malloc_r+0x26>
 80025d4:	230c      	movs	r3, #12
 80025d6:	6033      	str	r3, [r6, #0]
 80025d8:	2000      	movs	r0, #0
 80025da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80026b4 <_malloc_r+0xfc>
 80025e2:	f000 f869 	bl	80026b8 <__malloc_lock>
 80025e6:	f8d8 3000 	ldr.w	r3, [r8]
 80025ea:	461c      	mov	r4, r3
 80025ec:	bb44      	cbnz	r4, 8002640 <_malloc_r+0x88>
 80025ee:	4629      	mov	r1, r5
 80025f0:	4630      	mov	r0, r6
 80025f2:	f7ff ffbf 	bl	8002574 <sbrk_aligned>
 80025f6:	1c43      	adds	r3, r0, #1
 80025f8:	4604      	mov	r4, r0
 80025fa:	d158      	bne.n	80026ae <_malloc_r+0xf6>
 80025fc:	f8d8 4000 	ldr.w	r4, [r8]
 8002600:	4627      	mov	r7, r4
 8002602:	2f00      	cmp	r7, #0
 8002604:	d143      	bne.n	800268e <_malloc_r+0xd6>
 8002606:	2c00      	cmp	r4, #0
 8002608:	d04b      	beq.n	80026a2 <_malloc_r+0xea>
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	4639      	mov	r1, r7
 800260e:	4630      	mov	r0, r6
 8002610:	eb04 0903 	add.w	r9, r4, r3
 8002614:	f000 fb5c 	bl	8002cd0 <_sbrk_r>
 8002618:	4581      	cmp	r9, r0
 800261a:	d142      	bne.n	80026a2 <_malloc_r+0xea>
 800261c:	6821      	ldr	r1, [r4, #0]
 800261e:	1a6d      	subs	r5, r5, r1
 8002620:	4629      	mov	r1, r5
 8002622:	4630      	mov	r0, r6
 8002624:	f7ff ffa6 	bl	8002574 <sbrk_aligned>
 8002628:	3001      	adds	r0, #1
 800262a:	d03a      	beq.n	80026a2 <_malloc_r+0xea>
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	442b      	add	r3, r5
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	f8d8 3000 	ldr.w	r3, [r8]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	bb62      	cbnz	r2, 8002694 <_malloc_r+0xdc>
 800263a:	f8c8 7000 	str.w	r7, [r8]
 800263e:	e00f      	b.n	8002660 <_malloc_r+0xa8>
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	1b52      	subs	r2, r2, r5
 8002644:	d420      	bmi.n	8002688 <_malloc_r+0xd0>
 8002646:	2a0b      	cmp	r2, #11
 8002648:	d917      	bls.n	800267a <_malloc_r+0xc2>
 800264a:	1961      	adds	r1, r4, r5
 800264c:	42a3      	cmp	r3, r4
 800264e:	6025      	str	r5, [r4, #0]
 8002650:	bf18      	it	ne
 8002652:	6059      	strne	r1, [r3, #4]
 8002654:	6863      	ldr	r3, [r4, #4]
 8002656:	bf08      	it	eq
 8002658:	f8c8 1000 	streq.w	r1, [r8]
 800265c:	5162      	str	r2, [r4, r5]
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	4630      	mov	r0, r6
 8002662:	f000 f82f 	bl	80026c4 <__malloc_unlock>
 8002666:	f104 000b 	add.w	r0, r4, #11
 800266a:	1d23      	adds	r3, r4, #4
 800266c:	f020 0007 	bic.w	r0, r0, #7
 8002670:	1ac2      	subs	r2, r0, r3
 8002672:	bf1c      	itt	ne
 8002674:	1a1b      	subne	r3, r3, r0
 8002676:	50a3      	strne	r3, [r4, r2]
 8002678:	e7af      	b.n	80025da <_malloc_r+0x22>
 800267a:	6862      	ldr	r2, [r4, #4]
 800267c:	42a3      	cmp	r3, r4
 800267e:	bf0c      	ite	eq
 8002680:	f8c8 2000 	streq.w	r2, [r8]
 8002684:	605a      	strne	r2, [r3, #4]
 8002686:	e7eb      	b.n	8002660 <_malloc_r+0xa8>
 8002688:	4623      	mov	r3, r4
 800268a:	6864      	ldr	r4, [r4, #4]
 800268c:	e7ae      	b.n	80025ec <_malloc_r+0x34>
 800268e:	463c      	mov	r4, r7
 8002690:	687f      	ldr	r7, [r7, #4]
 8002692:	e7b6      	b.n	8002602 <_malloc_r+0x4a>
 8002694:	461a      	mov	r2, r3
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	42a3      	cmp	r3, r4
 800269a:	d1fb      	bne.n	8002694 <_malloc_r+0xdc>
 800269c:	2300      	movs	r3, #0
 800269e:	6053      	str	r3, [r2, #4]
 80026a0:	e7de      	b.n	8002660 <_malloc_r+0xa8>
 80026a2:	230c      	movs	r3, #12
 80026a4:	6033      	str	r3, [r6, #0]
 80026a6:	4630      	mov	r0, r6
 80026a8:	f000 f80c 	bl	80026c4 <__malloc_unlock>
 80026ac:	e794      	b.n	80025d8 <_malloc_r+0x20>
 80026ae:	6005      	str	r5, [r0, #0]
 80026b0:	e7d6      	b.n	8002660 <_malloc_r+0xa8>
 80026b2:	bf00      	nop
 80026b4:	2000020c 	.word	0x2000020c

080026b8 <__malloc_lock>:
 80026b8:	4801      	ldr	r0, [pc, #4]	@ (80026c0 <__malloc_lock+0x8>)
 80026ba:	f7ff bf0f 	b.w	80024dc <__retarget_lock_acquire_recursive>
 80026be:	bf00      	nop
 80026c0:	20000204 	.word	0x20000204

080026c4 <__malloc_unlock>:
 80026c4:	4801      	ldr	r0, [pc, #4]	@ (80026cc <__malloc_unlock+0x8>)
 80026c6:	f7ff bf0a 	b.w	80024de <__retarget_lock_release_recursive>
 80026ca:	bf00      	nop
 80026cc:	20000204 	.word	0x20000204

080026d0 <__ssputs_r>:
 80026d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d4:	688e      	ldr	r6, [r1, #8]
 80026d6:	461f      	mov	r7, r3
 80026d8:	42be      	cmp	r6, r7
 80026da:	680b      	ldr	r3, [r1, #0]
 80026dc:	4682      	mov	sl, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	4690      	mov	r8, r2
 80026e2:	d82d      	bhi.n	8002740 <__ssputs_r+0x70>
 80026e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80026ec:	d026      	beq.n	800273c <__ssputs_r+0x6c>
 80026ee:	6965      	ldr	r5, [r4, #20]
 80026f0:	6909      	ldr	r1, [r1, #16]
 80026f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026f6:	eba3 0901 	sub.w	r9, r3, r1
 80026fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026fe:	1c7b      	adds	r3, r7, #1
 8002700:	444b      	add	r3, r9
 8002702:	106d      	asrs	r5, r5, #1
 8002704:	429d      	cmp	r5, r3
 8002706:	bf38      	it	cc
 8002708:	461d      	movcc	r5, r3
 800270a:	0553      	lsls	r3, r2, #21
 800270c:	d527      	bpl.n	800275e <__ssputs_r+0x8e>
 800270e:	4629      	mov	r1, r5
 8002710:	f7ff ff52 	bl	80025b8 <_malloc_r>
 8002714:	4606      	mov	r6, r0
 8002716:	b360      	cbz	r0, 8002772 <__ssputs_r+0xa2>
 8002718:	6921      	ldr	r1, [r4, #16]
 800271a:	464a      	mov	r2, r9
 800271c:	f000 fae8 	bl	8002cf0 <memcpy>
 8002720:	89a3      	ldrh	r3, [r4, #12]
 8002722:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272a:	81a3      	strh	r3, [r4, #12]
 800272c:	6126      	str	r6, [r4, #16]
 800272e:	6165      	str	r5, [r4, #20]
 8002730:	444e      	add	r6, r9
 8002732:	eba5 0509 	sub.w	r5, r5, r9
 8002736:	6026      	str	r6, [r4, #0]
 8002738:	60a5      	str	r5, [r4, #8]
 800273a:	463e      	mov	r6, r7
 800273c:	42be      	cmp	r6, r7
 800273e:	d900      	bls.n	8002742 <__ssputs_r+0x72>
 8002740:	463e      	mov	r6, r7
 8002742:	6820      	ldr	r0, [r4, #0]
 8002744:	4632      	mov	r2, r6
 8002746:	4641      	mov	r1, r8
 8002748:	f000 faa8 	bl	8002c9c <memmove>
 800274c:	68a3      	ldr	r3, [r4, #8]
 800274e:	1b9b      	subs	r3, r3, r6
 8002750:	60a3      	str	r3, [r4, #8]
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	4433      	add	r3, r6
 8002756:	6023      	str	r3, [r4, #0]
 8002758:	2000      	movs	r0, #0
 800275a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800275e:	462a      	mov	r2, r5
 8002760:	f000 fad4 	bl	8002d0c <_realloc_r>
 8002764:	4606      	mov	r6, r0
 8002766:	2800      	cmp	r0, #0
 8002768:	d1e0      	bne.n	800272c <__ssputs_r+0x5c>
 800276a:	6921      	ldr	r1, [r4, #16]
 800276c:	4650      	mov	r0, sl
 800276e:	f7ff feb7 	bl	80024e0 <_free_r>
 8002772:	230c      	movs	r3, #12
 8002774:	f8ca 3000 	str.w	r3, [sl]
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	e7e9      	b.n	800275a <__ssputs_r+0x8a>
	...

08002788 <_svfiprintf_r>:
 8002788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278c:	4698      	mov	r8, r3
 800278e:	898b      	ldrh	r3, [r1, #12]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	b09d      	sub	sp, #116	@ 0x74
 8002794:	4607      	mov	r7, r0
 8002796:	460d      	mov	r5, r1
 8002798:	4614      	mov	r4, r2
 800279a:	d510      	bpl.n	80027be <_svfiprintf_r+0x36>
 800279c:	690b      	ldr	r3, [r1, #16]
 800279e:	b973      	cbnz	r3, 80027be <_svfiprintf_r+0x36>
 80027a0:	2140      	movs	r1, #64	@ 0x40
 80027a2:	f7ff ff09 	bl	80025b8 <_malloc_r>
 80027a6:	6028      	str	r0, [r5, #0]
 80027a8:	6128      	str	r0, [r5, #16]
 80027aa:	b930      	cbnz	r0, 80027ba <_svfiprintf_r+0x32>
 80027ac:	230c      	movs	r3, #12
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	b01d      	add	sp, #116	@ 0x74
 80027b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ba:	2340      	movs	r3, #64	@ 0x40
 80027bc:	616b      	str	r3, [r5, #20]
 80027be:	2300      	movs	r3, #0
 80027c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80027c2:	2320      	movs	r3, #32
 80027c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80027c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80027cc:	2330      	movs	r3, #48	@ 0x30
 80027ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800296c <_svfiprintf_r+0x1e4>
 80027d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80027d6:	f04f 0901 	mov.w	r9, #1
 80027da:	4623      	mov	r3, r4
 80027dc:	469a      	mov	sl, r3
 80027de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027e2:	b10a      	cbz	r2, 80027e8 <_svfiprintf_r+0x60>
 80027e4:	2a25      	cmp	r2, #37	@ 0x25
 80027e6:	d1f9      	bne.n	80027dc <_svfiprintf_r+0x54>
 80027e8:	ebba 0b04 	subs.w	fp, sl, r4
 80027ec:	d00b      	beq.n	8002806 <_svfiprintf_r+0x7e>
 80027ee:	465b      	mov	r3, fp
 80027f0:	4622      	mov	r2, r4
 80027f2:	4629      	mov	r1, r5
 80027f4:	4638      	mov	r0, r7
 80027f6:	f7ff ff6b 	bl	80026d0 <__ssputs_r>
 80027fa:	3001      	adds	r0, #1
 80027fc:	f000 80a7 	beq.w	800294e <_svfiprintf_r+0x1c6>
 8002800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002802:	445a      	add	r2, fp
 8002804:	9209      	str	r2, [sp, #36]	@ 0x24
 8002806:	f89a 3000 	ldrb.w	r3, [sl]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 809f 	beq.w	800294e <_svfiprintf_r+0x1c6>
 8002810:	2300      	movs	r3, #0
 8002812:	f04f 32ff 	mov.w	r2, #4294967295
 8002816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800281a:	f10a 0a01 	add.w	sl, sl, #1
 800281e:	9304      	str	r3, [sp, #16]
 8002820:	9307      	str	r3, [sp, #28]
 8002822:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002826:	931a      	str	r3, [sp, #104]	@ 0x68
 8002828:	4654      	mov	r4, sl
 800282a:	2205      	movs	r2, #5
 800282c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002830:	484e      	ldr	r0, [pc, #312]	@ (800296c <_svfiprintf_r+0x1e4>)
 8002832:	f7fd fcd5 	bl	80001e0 <memchr>
 8002836:	9a04      	ldr	r2, [sp, #16]
 8002838:	b9d8      	cbnz	r0, 8002872 <_svfiprintf_r+0xea>
 800283a:	06d0      	lsls	r0, r2, #27
 800283c:	bf44      	itt	mi
 800283e:	2320      	movmi	r3, #32
 8002840:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002844:	0711      	lsls	r1, r2, #28
 8002846:	bf44      	itt	mi
 8002848:	232b      	movmi	r3, #43	@ 0x2b
 800284a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800284e:	f89a 3000 	ldrb.w	r3, [sl]
 8002852:	2b2a      	cmp	r3, #42	@ 0x2a
 8002854:	d015      	beq.n	8002882 <_svfiprintf_r+0xfa>
 8002856:	9a07      	ldr	r2, [sp, #28]
 8002858:	4654      	mov	r4, sl
 800285a:	2000      	movs	r0, #0
 800285c:	f04f 0c0a 	mov.w	ip, #10
 8002860:	4621      	mov	r1, r4
 8002862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002866:	3b30      	subs	r3, #48	@ 0x30
 8002868:	2b09      	cmp	r3, #9
 800286a:	d94b      	bls.n	8002904 <_svfiprintf_r+0x17c>
 800286c:	b1b0      	cbz	r0, 800289c <_svfiprintf_r+0x114>
 800286e:	9207      	str	r2, [sp, #28]
 8002870:	e014      	b.n	800289c <_svfiprintf_r+0x114>
 8002872:	eba0 0308 	sub.w	r3, r0, r8
 8002876:	fa09 f303 	lsl.w	r3, r9, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	9304      	str	r3, [sp, #16]
 800287e:	46a2      	mov	sl, r4
 8002880:	e7d2      	b.n	8002828 <_svfiprintf_r+0xa0>
 8002882:	9b03      	ldr	r3, [sp, #12]
 8002884:	1d19      	adds	r1, r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	9103      	str	r1, [sp, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	bfbb      	ittet	lt
 800288e:	425b      	neglt	r3, r3
 8002890:	f042 0202 	orrlt.w	r2, r2, #2
 8002894:	9307      	strge	r3, [sp, #28]
 8002896:	9307      	strlt	r3, [sp, #28]
 8002898:	bfb8      	it	lt
 800289a:	9204      	strlt	r2, [sp, #16]
 800289c:	7823      	ldrb	r3, [r4, #0]
 800289e:	2b2e      	cmp	r3, #46	@ 0x2e
 80028a0:	d10a      	bne.n	80028b8 <_svfiprintf_r+0x130>
 80028a2:	7863      	ldrb	r3, [r4, #1]
 80028a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80028a6:	d132      	bne.n	800290e <_svfiprintf_r+0x186>
 80028a8:	9b03      	ldr	r3, [sp, #12]
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	9203      	str	r2, [sp, #12]
 80028b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80028b4:	3402      	adds	r4, #2
 80028b6:	9305      	str	r3, [sp, #20]
 80028b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800297c <_svfiprintf_r+0x1f4>
 80028bc:	7821      	ldrb	r1, [r4, #0]
 80028be:	2203      	movs	r2, #3
 80028c0:	4650      	mov	r0, sl
 80028c2:	f7fd fc8d 	bl	80001e0 <memchr>
 80028c6:	b138      	cbz	r0, 80028d8 <_svfiprintf_r+0x150>
 80028c8:	9b04      	ldr	r3, [sp, #16]
 80028ca:	eba0 000a 	sub.w	r0, r0, sl
 80028ce:	2240      	movs	r2, #64	@ 0x40
 80028d0:	4082      	lsls	r2, r0
 80028d2:	4313      	orrs	r3, r2
 80028d4:	3401      	adds	r4, #1
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028dc:	4824      	ldr	r0, [pc, #144]	@ (8002970 <_svfiprintf_r+0x1e8>)
 80028de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80028e2:	2206      	movs	r2, #6
 80028e4:	f7fd fc7c 	bl	80001e0 <memchr>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d036      	beq.n	800295a <_svfiprintf_r+0x1d2>
 80028ec:	4b21      	ldr	r3, [pc, #132]	@ (8002974 <_svfiprintf_r+0x1ec>)
 80028ee:	bb1b      	cbnz	r3, 8002938 <_svfiprintf_r+0x1b0>
 80028f0:	9b03      	ldr	r3, [sp, #12]
 80028f2:	3307      	adds	r3, #7
 80028f4:	f023 0307 	bic.w	r3, r3, #7
 80028f8:	3308      	adds	r3, #8
 80028fa:	9303      	str	r3, [sp, #12]
 80028fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028fe:	4433      	add	r3, r6
 8002900:	9309      	str	r3, [sp, #36]	@ 0x24
 8002902:	e76a      	b.n	80027da <_svfiprintf_r+0x52>
 8002904:	fb0c 3202 	mla	r2, ip, r2, r3
 8002908:	460c      	mov	r4, r1
 800290a:	2001      	movs	r0, #1
 800290c:	e7a8      	b.n	8002860 <_svfiprintf_r+0xd8>
 800290e:	2300      	movs	r3, #0
 8002910:	3401      	adds	r4, #1
 8002912:	9305      	str	r3, [sp, #20]
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 0c0a 	mov.w	ip, #10
 800291a:	4620      	mov	r0, r4
 800291c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002920:	3a30      	subs	r2, #48	@ 0x30
 8002922:	2a09      	cmp	r2, #9
 8002924:	d903      	bls.n	800292e <_svfiprintf_r+0x1a6>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0c6      	beq.n	80028b8 <_svfiprintf_r+0x130>
 800292a:	9105      	str	r1, [sp, #20]
 800292c:	e7c4      	b.n	80028b8 <_svfiprintf_r+0x130>
 800292e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002932:	4604      	mov	r4, r0
 8002934:	2301      	movs	r3, #1
 8002936:	e7f0      	b.n	800291a <_svfiprintf_r+0x192>
 8002938:	ab03      	add	r3, sp, #12
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	462a      	mov	r2, r5
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <_svfiprintf_r+0x1f0>)
 8002940:	a904      	add	r1, sp, #16
 8002942:	4638      	mov	r0, r7
 8002944:	f3af 8000 	nop.w
 8002948:	1c42      	adds	r2, r0, #1
 800294a:	4606      	mov	r6, r0
 800294c:	d1d6      	bne.n	80028fc <_svfiprintf_r+0x174>
 800294e:	89ab      	ldrh	r3, [r5, #12]
 8002950:	065b      	lsls	r3, r3, #25
 8002952:	f53f af2d 	bmi.w	80027b0 <_svfiprintf_r+0x28>
 8002956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002958:	e72c      	b.n	80027b4 <_svfiprintf_r+0x2c>
 800295a:	ab03      	add	r3, sp, #12
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	462a      	mov	r2, r5
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <_svfiprintf_r+0x1f0>)
 8002962:	a904      	add	r1, sp, #16
 8002964:	4638      	mov	r0, r7
 8002966:	f000 f879 	bl	8002a5c <_printf_i>
 800296a:	e7ed      	b.n	8002948 <_svfiprintf_r+0x1c0>
 800296c:	08002e0c 	.word	0x08002e0c
 8002970:	08002e16 	.word	0x08002e16
 8002974:	00000000 	.word	0x00000000
 8002978:	080026d1 	.word	0x080026d1
 800297c:	08002e12 	.word	0x08002e12

08002980 <_printf_common>:
 8002980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002984:	4616      	mov	r6, r2
 8002986:	4698      	mov	r8, r3
 8002988:	688a      	ldr	r2, [r1, #8]
 800298a:	690b      	ldr	r3, [r1, #16]
 800298c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002990:	4293      	cmp	r3, r2
 8002992:	bfb8      	it	lt
 8002994:	4613      	movlt	r3, r2
 8002996:	6033      	str	r3, [r6, #0]
 8002998:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800299c:	4607      	mov	r7, r0
 800299e:	460c      	mov	r4, r1
 80029a0:	b10a      	cbz	r2, 80029a6 <_printf_common+0x26>
 80029a2:	3301      	adds	r3, #1
 80029a4:	6033      	str	r3, [r6, #0]
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	0699      	lsls	r1, r3, #26
 80029aa:	bf42      	ittt	mi
 80029ac:	6833      	ldrmi	r3, [r6, #0]
 80029ae:	3302      	addmi	r3, #2
 80029b0:	6033      	strmi	r3, [r6, #0]
 80029b2:	6825      	ldr	r5, [r4, #0]
 80029b4:	f015 0506 	ands.w	r5, r5, #6
 80029b8:	d106      	bne.n	80029c8 <_printf_common+0x48>
 80029ba:	f104 0a19 	add.w	sl, r4, #25
 80029be:	68e3      	ldr	r3, [r4, #12]
 80029c0:	6832      	ldr	r2, [r6, #0]
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	42ab      	cmp	r3, r5
 80029c6:	dc26      	bgt.n	8002a16 <_printf_common+0x96>
 80029c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	3b00      	subs	r3, #0
 80029d0:	bf18      	it	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	0692      	lsls	r2, r2, #26
 80029d6:	d42b      	bmi.n	8002a30 <_printf_common+0xb0>
 80029d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80029dc:	4641      	mov	r1, r8
 80029de:	4638      	mov	r0, r7
 80029e0:	47c8      	blx	r9
 80029e2:	3001      	adds	r0, #1
 80029e4:	d01e      	beq.n	8002a24 <_printf_common+0xa4>
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	6922      	ldr	r2, [r4, #16]
 80029ea:	f003 0306 	and.w	r3, r3, #6
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf02      	ittt	eq
 80029f2:	68e5      	ldreq	r5, [r4, #12]
 80029f4:	6833      	ldreq	r3, [r6, #0]
 80029f6:	1aed      	subeq	r5, r5, r3
 80029f8:	68a3      	ldr	r3, [r4, #8]
 80029fa:	bf0c      	ite	eq
 80029fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a00:	2500      	movne	r5, #0
 8002a02:	4293      	cmp	r3, r2
 8002a04:	bfc4      	itt	gt
 8002a06:	1a9b      	subgt	r3, r3, r2
 8002a08:	18ed      	addgt	r5, r5, r3
 8002a0a:	2600      	movs	r6, #0
 8002a0c:	341a      	adds	r4, #26
 8002a0e:	42b5      	cmp	r5, r6
 8002a10:	d11a      	bne.n	8002a48 <_printf_common+0xc8>
 8002a12:	2000      	movs	r0, #0
 8002a14:	e008      	b.n	8002a28 <_printf_common+0xa8>
 8002a16:	2301      	movs	r3, #1
 8002a18:	4652      	mov	r2, sl
 8002a1a:	4641      	mov	r1, r8
 8002a1c:	4638      	mov	r0, r7
 8002a1e:	47c8      	blx	r9
 8002a20:	3001      	adds	r0, #1
 8002a22:	d103      	bne.n	8002a2c <_printf_common+0xac>
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a2c:	3501      	adds	r5, #1
 8002a2e:	e7c6      	b.n	80029be <_printf_common+0x3e>
 8002a30:	18e1      	adds	r1, r4, r3
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	2030      	movs	r0, #48	@ 0x30
 8002a36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a3a:	4422      	add	r2, r4
 8002a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a44:	3302      	adds	r3, #2
 8002a46:	e7c7      	b.n	80029d8 <_printf_common+0x58>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	4638      	mov	r0, r7
 8002a50:	47c8      	blx	r9
 8002a52:	3001      	adds	r0, #1
 8002a54:	d0e6      	beq.n	8002a24 <_printf_common+0xa4>
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7d9      	b.n	8002a0e <_printf_common+0x8e>
	...

08002a5c <_printf_i>:
 8002a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a60:	7e0f      	ldrb	r7, [r1, #24]
 8002a62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a64:	2f78      	cmp	r7, #120	@ 0x78
 8002a66:	4691      	mov	r9, r2
 8002a68:	4680      	mov	r8, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	469a      	mov	sl, r3
 8002a6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a72:	d807      	bhi.n	8002a84 <_printf_i+0x28>
 8002a74:	2f62      	cmp	r7, #98	@ 0x62
 8002a76:	d80a      	bhi.n	8002a8e <_printf_i+0x32>
 8002a78:	2f00      	cmp	r7, #0
 8002a7a:	f000 80d2 	beq.w	8002c22 <_printf_i+0x1c6>
 8002a7e:	2f58      	cmp	r7, #88	@ 0x58
 8002a80:	f000 80b9 	beq.w	8002bf6 <_printf_i+0x19a>
 8002a84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a8c:	e03a      	b.n	8002b04 <_printf_i+0xa8>
 8002a8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a92:	2b15      	cmp	r3, #21
 8002a94:	d8f6      	bhi.n	8002a84 <_printf_i+0x28>
 8002a96:	a101      	add	r1, pc, #4	@ (adr r1, 8002a9c <_printf_i+0x40>)
 8002a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a9c:	08002af5 	.word	0x08002af5
 8002aa0:	08002b09 	.word	0x08002b09
 8002aa4:	08002a85 	.word	0x08002a85
 8002aa8:	08002a85 	.word	0x08002a85
 8002aac:	08002a85 	.word	0x08002a85
 8002ab0:	08002a85 	.word	0x08002a85
 8002ab4:	08002b09 	.word	0x08002b09
 8002ab8:	08002a85 	.word	0x08002a85
 8002abc:	08002a85 	.word	0x08002a85
 8002ac0:	08002a85 	.word	0x08002a85
 8002ac4:	08002a85 	.word	0x08002a85
 8002ac8:	08002c09 	.word	0x08002c09
 8002acc:	08002b33 	.word	0x08002b33
 8002ad0:	08002bc3 	.word	0x08002bc3
 8002ad4:	08002a85 	.word	0x08002a85
 8002ad8:	08002a85 	.word	0x08002a85
 8002adc:	08002c2b 	.word	0x08002c2b
 8002ae0:	08002a85 	.word	0x08002a85
 8002ae4:	08002b33 	.word	0x08002b33
 8002ae8:	08002a85 	.word	0x08002a85
 8002aec:	08002a85 	.word	0x08002a85
 8002af0:	08002bcb 	.word	0x08002bcb
 8002af4:	6833      	ldr	r3, [r6, #0]
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6032      	str	r2, [r6, #0]
 8002afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b04:	2301      	movs	r3, #1
 8002b06:	e09d      	b.n	8002c44 <_printf_i+0x1e8>
 8002b08:	6833      	ldr	r3, [r6, #0]
 8002b0a:	6820      	ldr	r0, [r4, #0]
 8002b0c:	1d19      	adds	r1, r3, #4
 8002b0e:	6031      	str	r1, [r6, #0]
 8002b10:	0606      	lsls	r6, r0, #24
 8002b12:	d501      	bpl.n	8002b18 <_printf_i+0xbc>
 8002b14:	681d      	ldr	r5, [r3, #0]
 8002b16:	e003      	b.n	8002b20 <_printf_i+0xc4>
 8002b18:	0645      	lsls	r5, r0, #25
 8002b1a:	d5fb      	bpl.n	8002b14 <_printf_i+0xb8>
 8002b1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b20:	2d00      	cmp	r5, #0
 8002b22:	da03      	bge.n	8002b2c <_printf_i+0xd0>
 8002b24:	232d      	movs	r3, #45	@ 0x2d
 8002b26:	426d      	negs	r5, r5
 8002b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b2c:	4859      	ldr	r0, [pc, #356]	@ (8002c94 <_printf_i+0x238>)
 8002b2e:	230a      	movs	r3, #10
 8002b30:	e011      	b.n	8002b56 <_printf_i+0xfa>
 8002b32:	6821      	ldr	r1, [r4, #0]
 8002b34:	6833      	ldr	r3, [r6, #0]
 8002b36:	0608      	lsls	r0, r1, #24
 8002b38:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b3c:	d402      	bmi.n	8002b44 <_printf_i+0xe8>
 8002b3e:	0649      	lsls	r1, r1, #25
 8002b40:	bf48      	it	mi
 8002b42:	b2ad      	uxthmi	r5, r5
 8002b44:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b46:	4853      	ldr	r0, [pc, #332]	@ (8002c94 <_printf_i+0x238>)
 8002b48:	6033      	str	r3, [r6, #0]
 8002b4a:	bf14      	ite	ne
 8002b4c:	230a      	movne	r3, #10
 8002b4e:	2308      	moveq	r3, #8
 8002b50:	2100      	movs	r1, #0
 8002b52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b56:	6866      	ldr	r6, [r4, #4]
 8002b58:	60a6      	str	r6, [r4, #8]
 8002b5a:	2e00      	cmp	r6, #0
 8002b5c:	bfa2      	ittt	ge
 8002b5e:	6821      	ldrge	r1, [r4, #0]
 8002b60:	f021 0104 	bicge.w	r1, r1, #4
 8002b64:	6021      	strge	r1, [r4, #0]
 8002b66:	b90d      	cbnz	r5, 8002b6c <_printf_i+0x110>
 8002b68:	2e00      	cmp	r6, #0
 8002b6a:	d04b      	beq.n	8002c04 <_printf_i+0x1a8>
 8002b6c:	4616      	mov	r6, r2
 8002b6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b72:	fb03 5711 	mls	r7, r3, r1, r5
 8002b76:	5dc7      	ldrb	r7, [r0, r7]
 8002b78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b7c:	462f      	mov	r7, r5
 8002b7e:	42bb      	cmp	r3, r7
 8002b80:	460d      	mov	r5, r1
 8002b82:	d9f4      	bls.n	8002b6e <_printf_i+0x112>
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d10b      	bne.n	8002ba0 <_printf_i+0x144>
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	07df      	lsls	r7, r3, #31
 8002b8c:	d508      	bpl.n	8002ba0 <_printf_i+0x144>
 8002b8e:	6923      	ldr	r3, [r4, #16]
 8002b90:	6861      	ldr	r1, [r4, #4]
 8002b92:	4299      	cmp	r1, r3
 8002b94:	bfde      	ittt	le
 8002b96:	2330      	movle	r3, #48	@ 0x30
 8002b98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ba0:	1b92      	subs	r2, r2, r6
 8002ba2:	6122      	str	r2, [r4, #16]
 8002ba4:	f8cd a000 	str.w	sl, [sp]
 8002ba8:	464b      	mov	r3, r9
 8002baa:	aa03      	add	r2, sp, #12
 8002bac:	4621      	mov	r1, r4
 8002bae:	4640      	mov	r0, r8
 8002bb0:	f7ff fee6 	bl	8002980 <_printf_common>
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	d14a      	bne.n	8002c4e <_printf_i+0x1f2>
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	b004      	add	sp, #16
 8002bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	6023      	str	r3, [r4, #0]
 8002bca:	4833      	ldr	r0, [pc, #204]	@ (8002c98 <_printf_i+0x23c>)
 8002bcc:	2778      	movs	r7, #120	@ 0x78
 8002bce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	6831      	ldr	r1, [r6, #0]
 8002bd6:	061f      	lsls	r7, r3, #24
 8002bd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8002bdc:	d402      	bmi.n	8002be4 <_printf_i+0x188>
 8002bde:	065f      	lsls	r7, r3, #25
 8002be0:	bf48      	it	mi
 8002be2:	b2ad      	uxthmi	r5, r5
 8002be4:	6031      	str	r1, [r6, #0]
 8002be6:	07d9      	lsls	r1, r3, #31
 8002be8:	bf44      	itt	mi
 8002bea:	f043 0320 	orrmi.w	r3, r3, #32
 8002bee:	6023      	strmi	r3, [r4, #0]
 8002bf0:	b11d      	cbz	r5, 8002bfa <_printf_i+0x19e>
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	e7ac      	b.n	8002b50 <_printf_i+0xf4>
 8002bf6:	4827      	ldr	r0, [pc, #156]	@ (8002c94 <_printf_i+0x238>)
 8002bf8:	e7e9      	b.n	8002bce <_printf_i+0x172>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	f023 0320 	bic.w	r3, r3, #32
 8002c00:	6023      	str	r3, [r4, #0]
 8002c02:	e7f6      	b.n	8002bf2 <_printf_i+0x196>
 8002c04:	4616      	mov	r6, r2
 8002c06:	e7bd      	b.n	8002b84 <_printf_i+0x128>
 8002c08:	6833      	ldr	r3, [r6, #0]
 8002c0a:	6825      	ldr	r5, [r4, #0]
 8002c0c:	6961      	ldr	r1, [r4, #20]
 8002c0e:	1d18      	adds	r0, r3, #4
 8002c10:	6030      	str	r0, [r6, #0]
 8002c12:	062e      	lsls	r6, r5, #24
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	d501      	bpl.n	8002c1c <_printf_i+0x1c0>
 8002c18:	6019      	str	r1, [r3, #0]
 8002c1a:	e002      	b.n	8002c22 <_printf_i+0x1c6>
 8002c1c:	0668      	lsls	r0, r5, #25
 8002c1e:	d5fb      	bpl.n	8002c18 <_printf_i+0x1bc>
 8002c20:	8019      	strh	r1, [r3, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	6123      	str	r3, [r4, #16]
 8002c26:	4616      	mov	r6, r2
 8002c28:	e7bc      	b.n	8002ba4 <_printf_i+0x148>
 8002c2a:	6833      	ldr	r3, [r6, #0]
 8002c2c:	1d1a      	adds	r2, r3, #4
 8002c2e:	6032      	str	r2, [r6, #0]
 8002c30:	681e      	ldr	r6, [r3, #0]
 8002c32:	6862      	ldr	r2, [r4, #4]
 8002c34:	2100      	movs	r1, #0
 8002c36:	4630      	mov	r0, r6
 8002c38:	f7fd fad2 	bl	80001e0 <memchr>
 8002c3c:	b108      	cbz	r0, 8002c42 <_printf_i+0x1e6>
 8002c3e:	1b80      	subs	r0, r0, r6
 8002c40:	6060      	str	r0, [r4, #4]
 8002c42:	6863      	ldr	r3, [r4, #4]
 8002c44:	6123      	str	r3, [r4, #16]
 8002c46:	2300      	movs	r3, #0
 8002c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c4c:	e7aa      	b.n	8002ba4 <_printf_i+0x148>
 8002c4e:	6923      	ldr	r3, [r4, #16]
 8002c50:	4632      	mov	r2, r6
 8002c52:	4649      	mov	r1, r9
 8002c54:	4640      	mov	r0, r8
 8002c56:	47d0      	blx	sl
 8002c58:	3001      	adds	r0, #1
 8002c5a:	d0ad      	beq.n	8002bb8 <_printf_i+0x15c>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	079b      	lsls	r3, r3, #30
 8002c60:	d413      	bmi.n	8002c8a <_printf_i+0x22e>
 8002c62:	68e0      	ldr	r0, [r4, #12]
 8002c64:	9b03      	ldr	r3, [sp, #12]
 8002c66:	4298      	cmp	r0, r3
 8002c68:	bfb8      	it	lt
 8002c6a:	4618      	movlt	r0, r3
 8002c6c:	e7a6      	b.n	8002bbc <_printf_i+0x160>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	4632      	mov	r2, r6
 8002c72:	4649      	mov	r1, r9
 8002c74:	4640      	mov	r0, r8
 8002c76:	47d0      	blx	sl
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d09d      	beq.n	8002bb8 <_printf_i+0x15c>
 8002c7c:	3501      	adds	r5, #1
 8002c7e:	68e3      	ldr	r3, [r4, #12]
 8002c80:	9903      	ldr	r1, [sp, #12]
 8002c82:	1a5b      	subs	r3, r3, r1
 8002c84:	42ab      	cmp	r3, r5
 8002c86:	dcf2      	bgt.n	8002c6e <_printf_i+0x212>
 8002c88:	e7eb      	b.n	8002c62 <_printf_i+0x206>
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	f104 0619 	add.w	r6, r4, #25
 8002c90:	e7f5      	b.n	8002c7e <_printf_i+0x222>
 8002c92:	bf00      	nop
 8002c94:	08002e1d 	.word	0x08002e1d
 8002c98:	08002e2e 	.word	0x08002e2e

08002c9c <memmove>:
 8002c9c:	4288      	cmp	r0, r1
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	eb01 0402 	add.w	r4, r1, r2
 8002ca4:	d902      	bls.n	8002cac <memmove+0x10>
 8002ca6:	4284      	cmp	r4, r0
 8002ca8:	4623      	mov	r3, r4
 8002caa:	d807      	bhi.n	8002cbc <memmove+0x20>
 8002cac:	1e43      	subs	r3, r0, #1
 8002cae:	42a1      	cmp	r1, r4
 8002cb0:	d008      	beq.n	8002cc4 <memmove+0x28>
 8002cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cba:	e7f8      	b.n	8002cae <memmove+0x12>
 8002cbc:	4402      	add	r2, r0
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	428a      	cmp	r2, r1
 8002cc2:	d100      	bne.n	8002cc6 <memmove+0x2a>
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002cce:	e7f7      	b.n	8002cc0 <memmove+0x24>

08002cd0 <_sbrk_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4d06      	ldr	r5, [pc, #24]	@ (8002cec <_sbrk_r+0x1c>)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	f7fd ff32 	bl	8000b44 <_sbrk>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d102      	bne.n	8002cea <_sbrk_r+0x1a>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	b103      	cbz	r3, 8002cea <_sbrk_r+0x1a>
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	20000200 	.word	0x20000200

08002cf0 <memcpy>:
 8002cf0:	440a      	add	r2, r1
 8002cf2:	4291      	cmp	r1, r2
 8002cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cf8:	d100      	bne.n	8002cfc <memcpy+0xc>
 8002cfa:	4770      	bx	lr
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d06:	4291      	cmp	r1, r2
 8002d08:	d1f9      	bne.n	8002cfe <memcpy+0xe>
 8002d0a:	bd10      	pop	{r4, pc}

08002d0c <_realloc_r>:
 8002d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d10:	4680      	mov	r8, r0
 8002d12:	4615      	mov	r5, r2
 8002d14:	460c      	mov	r4, r1
 8002d16:	b921      	cbnz	r1, 8002d22 <_realloc_r+0x16>
 8002d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	f7ff bc4b 	b.w	80025b8 <_malloc_r>
 8002d22:	b92a      	cbnz	r2, 8002d30 <_realloc_r+0x24>
 8002d24:	f7ff fbdc 	bl	80024e0 <_free_r>
 8002d28:	2400      	movs	r4, #0
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d30:	f000 f81a 	bl	8002d68 <_malloc_usable_size_r>
 8002d34:	4285      	cmp	r5, r0
 8002d36:	4606      	mov	r6, r0
 8002d38:	d802      	bhi.n	8002d40 <_realloc_r+0x34>
 8002d3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002d3e:	d8f4      	bhi.n	8002d2a <_realloc_r+0x1e>
 8002d40:	4629      	mov	r1, r5
 8002d42:	4640      	mov	r0, r8
 8002d44:	f7ff fc38 	bl	80025b8 <_malloc_r>
 8002d48:	4607      	mov	r7, r0
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d0ec      	beq.n	8002d28 <_realloc_r+0x1c>
 8002d4e:	42b5      	cmp	r5, r6
 8002d50:	462a      	mov	r2, r5
 8002d52:	4621      	mov	r1, r4
 8002d54:	bf28      	it	cs
 8002d56:	4632      	movcs	r2, r6
 8002d58:	f7ff ffca 	bl	8002cf0 <memcpy>
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	4640      	mov	r0, r8
 8002d60:	f7ff fbbe 	bl	80024e0 <_free_r>
 8002d64:	463c      	mov	r4, r7
 8002d66:	e7e0      	b.n	8002d2a <_realloc_r+0x1e>

08002d68 <_malloc_usable_size_r>:
 8002d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6c:	1f18      	subs	r0, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bfbc      	itt	lt
 8002d72:	580b      	ldrlt	r3, [r1, r0]
 8002d74:	18c0      	addlt	r0, r0, r3
 8002d76:	4770      	bx	lr

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
